buildscript {
    ext {
        awsLambdaJavaCoreVersion = '1.2.1'
        awssdkBomVersion = '2.17.156'
        jacksonDatabindVersion = '2.13.2'
        junitBomVersion = '5.8.2'
        hamcrestVersion = '2.2'
        mockitoInlineVersion = '3.11.2'
        slf4jSimpleVersion = '1.7.30'

        dependencyManagementPluginVersion = '1.0.11.RELEASE'
    }
}

plugins {
    id 'java'
    id "io.spring.dependency-management" version "${dependencyManagementPluginVersion}"
}

group = 'org.ideaslabut'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '11'

dependencyManagement {
    imports {
        mavenBom "software.amazon.awssdk:bom:${awssdkBomVersion}"
        mavenBom "org.junit:junit-bom:${junitBomVersion}"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "software.amazon.awssdk:sdk-core"
    implementation "software.amazon.awssdk:apigatewaymanagementapi"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    implementation "com.amazonaws:aws-lambda-java-core:${awsLambdaJavaCoreVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    testImplementation "org.mockito:mockito-inline:${mockitoInlineVersion}"
    testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"

}

task lambdaJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archivesBaseName = project.name
    destinationDirectory = project.file("${project.buildDir}/libs")
    from project.compileJava
    from project.processResources
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude "**/Main.class", "**/**.sample", "**/ProgressBar**.class",  "**/CSVWriter**.class"
    into ""
}

test {
    useJUnitPlatform()
}